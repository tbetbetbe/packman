#!/usr/bin/env node
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * gen-api-package is a tool for generating language packages for gRPC
 * services.
 *
 * Example usage:
 *
 * Create the pubsub v1 API for all the default languages directly from the
 * googleapis github project.
 *
 * ```sh
 * $ gen-api-package --api_name=pubsub/v1
 * ```
 *
 * Create the pubsub v1 API for ruby and python from a local copy of the
 * googleapis github project.
 *
 * ```sh
 * $ # clone the googleapis locally
 * $ pushd ..
 * $ git clone git@github.com:googleapis/googleapis.git
 * $ # do some work in it, e.g, to test a change
 * $ ...
 * $ popd  # back to the original wd
 * $ gen-api-package --api_name=pubsub/v1  -r ../googleapis -l python ruby
 * ```
 *
 * Print full usage
 * ```sh
 * $ gen-api-package -h
 * ```
 */
'use strict';

var _ = require('lodash');
var path = require('path');
var version = require('../package.json').version;
var apiRepo = require('../lib/api_repo');

var ArgumentParser = require('argparse').ArgumentParser;

/**
 * parseArgs parses the command line options/arguments when this file is run as
 * a script.
 */
var parseArgs = function parseArgs() {
  var cli = new ArgumentParser({
    prog: 'gen-api-package',
    addHelp: true,
    description: 'Creates packages for gRPC services.',
    version: version
  });
  cli.addArgument(
    [ '-x', '--build_common_protos' ],
    {
      defaultValue: false,
      action: 'storeTrue',
      help: 'Build a package containing the common google API protobufs.\n' +
            'The value of --api_name will be ignored.',
      dest: 'buildCommonProtos'
    }
  );
  cli.addArgument(
    [ '-i', '--include_path' ],
    {
      action: 'append',
      help: 'Include paths for additional protos.\n' +
        'This is can specified multiple times and specifies directories' +
        ' outside the --services_root that contain proto dependencies.',
      dest: 'includePath'
    }
  );
  cli.addArgument(
    [ '-o', '--out_dir' ],
    {
      help: 'The directory in which the generated packages will be saved.',
      dest: 'outDir'
    }
  );
  cli.addArgument(
    [ '--gax_dir' ],
    {
      help: 'The directory in which a partial gax package has been created.',
      dest: 'gaxDir'
    }
  );
  cli.addArgument(
    [ '-n', '--api_name' ],
    {
      help: 'Name of the api to generate.\n' +
            'The name should include the version component; e.g. use ' +
            '"pubsub/v1" to specify the protos in pubsub/v1 sub-directory' +
            ' of the services_root.',
      dest: 'apiName'
    }
  );
  cli.addArgument(
    [ '-l', '--languages' ],
    {
      help: 'Specifies the language for which packages should be generated.\n',
      nargs: '*',
      dest: 'languages'
    }
  );
  cli.addArgument(
    [ '-r', '--services_root' ],
    {
      help: 'The directory containing the rpc service proto definitions.\n' +
            ' Should not be specified with -u/--zip_url, which clobbers this.',
      dest: 'repoDir'
    }
  );
  cli.addArgument(
    [ '-u', '--zip_url' ],
    {
      help: 'URL of a git repository containing the rpc proto definitions.\n' +
            'Should not be specified with -r/--services_root, which will be' +
            ' ignored.',
      dest: 'zipUrl'
    }
  );
  cli.addArgument(
    [ '--api_defaults_file' ],
    {
      help: 'Specifies an alternate location for the api_defaults config' +
            ' file.\n api_defaults.yml configures shared package metadata' +
            ' to be used in packages of any language.',
      dest: 'apiDefaultsFile'
    }
  );
  cli.addArgument(
    [ '--dependencies_file' ],
    {
      help: 'Specifies an alternate location for the deps config file.\n' +
            ' dependencies.yml configures the per-language dependencies' +
            ' that each language package relies on.',
      dest: 'depsFile'
    }
  );
  cli.addArgument(
    [ '--common_protos_file' ],
    {
      help: 'Specifies an alternate location for the common protos config' +
            ' file. common_protos.yml configures the paths to include when' +
            ' generating the packages that contain common protos.',
      dest: 'commonPbFile'
    }
  );
  cli.addArgument(
    [ '--package_prefix' ],
    {
      defaultValue: '',
      help: 'Prefix to use when constructing package names\n' +
            'if is_google_api is set, this defaults to "grpc-google-"' +
            ' otherwise the default is "".',
      dest: 'pkgPrefix'
    }
  );
  cli.addArgument(
    [ '--template_root' ],
    {
      defaultValue:  path.join(__dirname, '..', 'templates'),
      help: 'The root dir for the package templates.\n' +
            ' Allows alternate templates to be used during package' +
            ' generation. The template root must contain the same files' +
            ' for any specified languages as in the builtin template root.',
      dest: 'templateRoot'
    }
  );
  cli.addArgument(
    [ '-g', '--is_google_api' ],
    {
      defaultValue: true,
      action: 'storeTrue',
      help: 'When set indicates that the API is an official google API.\n'
            + ' It means that there is a top-level "google" directory in'
            + ' the target protocol buffer repository.',
      dest: 'isGoogleApi'
    }
  );
  cli.addArgument(
    [ '--experimental_alt_java' ],
    {
      defaultValue: false,
      action: 'storeTrue',
      help: 'When set indicates that the alternate build is used for java.\n'
            + ' This ensures that the generated gradle files will build packages'
            + ' that contain compiled java classes rather the protobuf source.',
      dest: 'altJava'
    }
  );
  cli.addArgument(
    [ '--override_plugins' ],
    {
      action: 'append',
      help: 'Specifies the override protoc plugins to be used.\n' +
            ' E.g by default the plugin for python is named' +
            ' grpc_python_plugin. This can be modified by specifying ' +
            ' --override_plugins python=other_rpc_python_plugin.',
      dest: 'overridePlugins'
    }
  );
  cli.addArgument(
    [ '--experimental_extra_apis' ],
    {
      action: 'append',
      help: 'Specifies additional apis to include.\n' +
            ' In the unusual situations where this necessary ' +
            ' allow extra apis to be included in the package ' +
            ' generated for the main on.  Example:\n' +
            ' --experimental_extra_apis logging/v1\n' +
            ' adds the logging/v1 api to the current package',
      dest: 'extraApis'
    }
  );
  return cli.parseArgs();
};

function parsePlugins(pluginSpecs) {
  var parsedSpecs = [];
  _.forEach(pluginSpecs, function(p) {
    var split = p.split(":");
    if (split.length !== 2) {
      console.error('Ignoring invalid plugin override spec %s', p);
      return;
    }
    parsedSpecs.push(split);
  });
  if (parsedSpecs.length === 0) {
    return {};
  }
  return _.object(parsedSpecs);
}


/**
 * main is the command line entry point when this file is run as a script.
 */
var main = function main() {
  var opts = parseArgs();
  if (opts.isGoogleApi && !opts.pkgPrefix) {
    opts.pkgPrefix = 'grpc-google-';
  }
  if (opts.buildCommonProtos) {
    opts.isGoogleApi = true;
    opts.pkgPrefix = 'googleapis-common-protos';
    opts.apiName = 'googleapis-common-protos';
    opts.apiVersion = '';
  }
  if (opts.overridePlugins) {
    opts.overridePlugins = parsePlugins(opts.overridePlugins);
  }
  if (opts.outDir) {
    opts.outDir = path.resolve(opts.outDir);
  }
  if (opts.repoDir) {
    opts.repoDir = path.resolve(opts.repoDir);
  }
  if (opts.gaxDir) {
    opts.gaxDir = path.resolve(opts.gaxDir);
    opts.isGoogleApi = true;
    opts.pkgPrefix = 'gax-google-';
    opts.outDir = opts.gaxDir;
  }
  if (!opts.apiName) {
    console.error('Please specify a value for --api-name');
    process.exit(1);
  }

  var repo = new apiRepo.ApiRepo(opts);
  var nameVersion = apiRepo.parseApiName(opts.apiName);
  var apiName = nameVersion[0];
  var apiVersion = nameVersion[1];

  repo.on('ready', function() {
    if (opts.gaxDir) {
      repo.buildGaxPackages(apiName, apiVersion);
    } else if (opts.buildCommonProtos) {
      repo.buildCommonProtoPkgs();
    } else {
      repo.buildPackages(apiName, apiVersion);
    }
  });
  repo.on('error', function(err) {
    console.error('Could not build packages:', err);
  });
  repo.setUp();
}

if (require.main === module) {
  main();
}
